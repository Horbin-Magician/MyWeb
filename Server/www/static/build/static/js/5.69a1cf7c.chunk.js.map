{"version":3,"sources":["components/loginModal/loginModal.jsx","components/header/header.jsx","pages/tools/favourites/components/favInput.jsx","pages/tools/favourites/components/favMenu.jsx","pages/tools/favourites/components/leftNav/leftNav.jsx","pages/tools/favourites/components/favCard/favCard.jsx","pages/tools/favourites/components/cardContent/cardContent.jsx","pages/tools/favourites/favourites.jsx","pages/tools/tools.jsx"],"names":["LoginModal","onFinish","values","a","username","password","userlogin","data","status","props","switchShow","title","visible","this","showLogin","onCancel","footer","name","initialValues","Item","rules","required","message","min","max","pattern","prefix","UserOutlined","className","placeholder","LockOutlined","type","style","width","htmlType","Component","SubMenu","Header","state","onUserClick","checkLogin","confirm","onOk","userlogout","forceUpdate","switchLoginShow","setState","url","history","location","pathname","split","nowKey","length","userIcon","MenuOutlined","mode","selectedKeys","icon","HomeOutlined","to","ToolOutlined","QuestionCircleOutlined","shape","onClick","withRouter","FavInput","input","React","createRef","onExit","editFavType","current","value","focus","ref","onBlur","onPressEnter","blur","FavMenu","onEdit","typeName","onDoubleClick","display","Sider","LeftNav","theme","menuList","onAddStatus","selectedMenu","dragingMenu","targetMenu","setSelectedMenu","onFavTypeChange","updateMenuList","reqFavTypeList","then","sMenu","listData","find","item","getRankFromTitle","rank","onDragStart","ev","target","childNodes","innerHTML","onDropOver","preventDefault","onDrop","reqMoveType","getMenuNodes","map","targetStyle","targetRank","borderTop","borderBottom","draggable","onDragOver","onAdd","onDel","reqDelType","success","onSelect","key","oldTitle","newTitle","error","reqUpdateType","undefined","addFavType","push","menuNodes","disabled","PlusCircleOutlined","fontSize","DeleteOutlined","Meta","FavouritesCard","description","reqDelItem","update","onRankChange","reqUpdateItem","maxWidth","minWidth","headStyle","minHeight","actions","EditOutlined","defaultValue","onChange","textAlign","hoverable","avatar","size","src","FrownOutlined","window","open","Option","CardContent","showStatus","formRef","oldUrl","getCardNodes","itemList","updateItem","validateFields","afterUpdate","catch","info","resetFields","typeOptions","setFieldsValue","cardNodes","gutter","PlusOutlined","color","height","favType","forceRender","afterAdd","margin","Content","Favourites","reqFavItemList","Tools","path","component"],"mappings":"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","file":"static/js/5.69a1cf7c.chunk.js","sourcesContent":["import {Component} from 'react'\nimport {Form, Input, Button, Modal} from 'antd';\nimport {UserOutlined, LockOutlined} from '@ant-design/icons';\n\nimport {userlogin} from '../../utils/userUtils'\n\n/*\n登录页的路由组件\n*/ \nexport default class LoginModal extends Component {\n  onFinish = async (values) => {\n    const {username, password} = values\n    const data = await userlogin(username, password)\n    if(data && data.status === '0')this.props.switchShow()\n  };\n\n  render() {\n    return (\n        <Modal title='用户登录'\n        visible={this.props.showLogin} onCancel={this.props.switchShow}\n        footer={null}>\n            <Form name=\"normal_login\" footer={null}\n            initialValues={{}}\n            onFinish={this.onFinish}>\n                <Form.Item name=\"username\"\n                rules={[\n                    {required: true,message: '请输入用户名'},\n                    {min: 4,message: '用户名最少4位'},\n                    {max: 12,message: '用户名最多12位'},\n                    {pattern: /^[a-zA-z0-9_*!]+$/,message: '用户名必须由英文、数字或英文字符_*!组成'},\n                ]}>\n                  <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"用户名\" />\n                </Form.Item>\n                <Form.Item name=\"password\"\n                rules={[\n                    {required: true,message: '请输入密码！'},\n                    {min: 6,message: '密码最少6位'},\n                    {max: 16,message: '密码最多16位'},\n                    {pattern: /^[a-zA-z0-9_*!]+$/,message: '密码必须由英文、数字或英文字符_*!组成'},\n                ]}>\n                  <Input prefix={<LockOutlined className=\"site-form-item-icon\" />} type=\"password\" placeholder=\"密码\"/>\n                </Form.Item>\n                <Form.Item>\n                  <Button style={{width:'100%'}} type=\"primary\" htmlType=\"submit\">登录</Button>\n                </Form.Item>\n            </Form>\n        </Modal>\n     );\n  }\n}","import React, {Component} from 'react'\nimport {Link, withRouter} from 'react-router-dom'\nimport {HomeOutlined, ToolOutlined, QuestionCircleOutlined, UserOutlined, MenuOutlined} from '@ant-design/icons'\nimport {Menu, Row, Col, Button, Modal} from 'antd';\n\nimport LoginModal from '../loginModal/loginModal'\nimport {userlogout, checkLogin} from '../../utils/userUtils'\nimport './header.less'\n/*\n头部组件\n */\nconst {SubMenu,Item} = Menu\nclass Header extends Component{\n    state = {\n        showLogin:false,\n    }\n\n    onUserClick = ()=>{\n        if(checkLogin()){//退出登录\n            Modal.confirm({title: '是否确认注销？',\n                onOk: () => {\n                    userlogout()//注销\n                    this.forceUpdate()\n                },\n            })\n            return\n        }\n        this.switchLoginShow()\n    }\n\n    switchLoginShow = ()=>this.setState({showLogin:!this.state.showLogin,})\n\n    render(){\n        //根据url获取nowKey\n        const url = this.props.history.location.pathname.split('/')\n        const nowKey = url[url.length-1] === '' ? 'home' : url[url.length-1]\n        //判断是否已经登录\n        const userIcon = checkLogin() ? <MenuOutlined /> : <UserOutlined />\n        return(\n            <Row className='header'>\n                <Col>\n                    <Menu className='header-menu' mode=\"horizontal\" selectedKeys={[nowKey]}>\n                        <Item key=\"home\" icon={<HomeOutlined/>}>\n                            <Link to={'/'}>首页</Link>\n                        </Item>\n                        <SubMenu key=\"tools\" title=\"小工具\" icon={<ToolOutlined/>}>\n                            <Item key=\"favorites\">\n                                <Link to={'/tools/favorites'}>收藏夹</Link>\n                            </Item>\n                        </SubMenu>\n                        <Item key=\"about\" icon={<QuestionCircleOutlined/>}>\n                            <Link to={'/about'}>关于</Link>\n                        </Item>\n                    </Menu>\n                </Col>\n                <Col>\n                    <Button type=\"primary\" shape='circle' onClick={this.onUserClick}>\n                        {userIcon}\n                    </Button>\n                </Col>\n                <LoginModal switchShow={this.switchLoginShow} showLogin={this.state.showLogin}/>\n            </Row>\n        )\n    }\n}\nexport default withRouter(Header)","import React, {Component} from 'react'\nimport { Input } from 'antd';\n\n/*\n左侧导航的组件\n */\nexport default class FavInput extends Component{\n    input = React.createRef()\n\n    componentDidUpdate(){\n        this.input.current.focus()\n    }\n\n    onExit = ()=>{\n        this.props.editFavType(this.input.current.state.value)\n        this.input.current.setState({value:''})\n    }\n\n    render(){\n        return(\n            <Input ref={this.input} onBlur={this.onExit}\n            onPressEnter={()=>{this.input.current.blur()}}>\n            </Input>\n        )\n    }\n}","import React, {Component} from 'react'\n\nimport FavInput from './favInput'\n\n/*\n左侧导航的组件\n */\nexport default class FavMenu extends Component{\n    state={\n        onEdit:false\n    }\n\n    editFavType = (typeName)=>{\n        this.props.editFavType(this.props.title,typeName)\n        this.setState({onEdit:false})\n    }\n\n    onDoubleClick = ()=>{\n        this.setState({onEdit:true})\n    }\n\n    render(){\n        const {onEdit} = this.state\n        const {title} = this.props\n        return(\n            <div>\n                <div style={{display:onEdit ? 'none' : 'block'}} onDoubleClick={this.onDoubleClick}>\n                    {title}\n                </div>\n                <div style={{display:onEdit ? 'block' : 'none'}}>\n                    <FavInput editFavType={this.editFavType}/>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport {Layout, Menu, Button, message, Modal} from 'antd'\nimport {\n    PlusCircleOutlined,\n    DeleteOutlined,\n  } from '@ant-design/icons';\n\nimport {reqFavTypeList, reqDelType, reqUpdateType, reqMoveType} from '../../../../../api'\nimport {checkLogin} from '../../../../../utils/userUtils'\nimport FavInput from '../favInput'\nimport FavMenu from '../favMenu'\n/*\n左侧导航的组件\n */\nconst {Sider} = Layout;\nconst {confirm} = Modal\n\nexport default class LeftNav extends Component{\n    state={\n        theme:'light',\n        menuList:[],\n        onAddStatus: false,\n        selectedMenu:'',\n        dragingMenu:{},\n        targetMenu:{},\n    }\n    //组件加载后更新MenuList\n    componentDidMount(){\n        this.updateMenuList()\n    }\n    //设置被选中菜单\n    setSelectedMenu = (title)=>{\n        this.setState({selectedMenu:title})\n        this.props.onFavTypeChange(title)\n    }\n    //更新菜单列表\n    updateMenuList = ()=>{\n        reqFavTypeList().then(data=>{\n            const sMenu = this.state.selectedMenu\n            const listData = data.data\n            this.setState({menuList:listData})\n            //更新后，若selectedMenu不在menuList中，重置selectedMenu\n            if( (!sMenu || !listData.find(item=>item.title===sMenu)) && listData[0]){\n                this.setSelectedMenu(listData[0].title)\n            }\n        })\n    }\n    //根据Title获得Rank\n    getRankFromTitle = (title)=>{\n        const item = this.state.menuList.find(item=>item.title===title)\n        return item.rank\n    }\n    //开始拖动事件\n    onDragStart = (ev)=>{\n        //获取并设置dragingMenu于state\n        const dragingMenu = ev.target.childNodes[0].childNodes[0].innerHTML\n        this.setState({dragingMenu:dragingMenu})\n    }\n    //拖动中，悬浮事件\n    onDropOver = (ev)=>{\n        ev.preventDefault()\n        //获取并设置targetMenu于state\n        const {dragingMenu} = this.state\n        const targetMenu = ev.target.innerHTML\n        if(dragingMenu !== targetMenu)this.setState({targetMenu:targetMenu})\n    }\n    //拖动结束事件\n    onDrop = (ev)=>{\n        //进行移动排序操作\n        const {targetMenu, dragingMenu} = this.state\n        reqMoveType(dragingMenu, targetMenu).then(data=>{\n            if(data.status === '0')this.updateMenuList()\n        })\n        this.setState({targetMenu:{}, dragingMenu:{}})//初始化相关state\n    }\n    //由menuList获得用于渲染的menu节点\n    getMenuNodes = (menuList)=>{\n        const {targetMenu, dragingMenu} = this.state\n        return menuList.map(item => {\n            let targetStyle = {}\n            //由rank判断并设置targetStyle\n            if(targetMenu===item.title){\n                const targetRank = this.getRankFromTitle(targetMenu)\n                const dragingRank = this.getRankFromTitle(dragingMenu)\n                if(dragingRank>targetRank)targetStyle = {borderTop:\"2px dashed #1890ff\"}\n                else targetStyle = {borderBottom:\"2px dashed #1890ff\"}\n            }\n            return(\n                <Menu.Item key={item.title} style={targetStyle} draggable={true} \n                onDragStart={this.onDragStart} onDragOver={this.onDropOver}\n                onDrop={this.onDrop}\n                >\n                    <FavMenu title={item.title} editFavType={this.editFavType}/>\n                </Menu.Item>\n            )\n        })\n    }\n    //添加点击事件\n    onAdd = ()=>this.setState({onAddStatus:true})\n    //删除点击事件\n    onDel = ()=>{\n        confirm({\n            title: '是否确定删除?',\n            onOk:() => {\n                reqDelType(this.state.selectedMenu).then(data=>{\n                    if(data.status === '0'){\n                        message.success('删除成功！')\n                        this.updateMenuList()\n                    }\n                })\n            },\n        });\n    }\n    //menu选择事件，设置selectedMenu\n    onSelect = (value)=>this.setSelectedMenu(value.key)\n    //编辑菜单项Title\n    editFavType = (oldTitle, newTitle)=>{\n        //判断是否与已有名称相同\n        if(this.state.menuList.find(item=>item.title===newTitle)){\n            message.error('已有相同类别，请更换一个！')\n            return\n        }else if(newTitle){\n            reqUpdateType(newTitle,undefined,oldTitle).then(data=>{\n                if(data.status === '0'){\n                    message.success('修改成功！')\n                    this.updateMenuList()\n                    if(oldTitle === this.state.selectedMenu)this.setState({selectedMenu:newTitle})\n                }\n            })\n        }\n    }\n    //添加菜单项\n    addFavType = (typeName)=>{\n        let {menuList} = this.state\n        if(menuList.find(item=>item.title===typeName)){\n            message.error('已有相同类别，请更换一个！')\n        }else if(typeName){\n            const rank = menuList.length\n            reqUpdateType(typeName, rank).then(data=>{\n                if(data.status === '0'){\n                    message.success('添加成功！')\n                    menuList.push({rank:rank, title:typeName})\n                    this.setState({menuList:menuList})\n                }\n            })\n        }\n        this.setState({onAddStatus:false})\n    }\n\n    render(){\n        const {menuList, onAddStatus, selectedMenu} = this.state\n        const menuNodes = this.getMenuNodes(menuList)\n        return(\n            <Sider width='150' className=\"favourites-sider\" theme={this.state.theme}>\n                <Menu className=\"favourites-sider-menu\" mode=\"inline\"\n                selectedKeys={[selectedMenu]}\n                onSelect={this.onSelect}>\n                    {menuNodes}\n                    <Menu.Item  key='new-menu' disabled style={{display:onAddStatus ? 'block' : 'none'}}>\n                        <FavInput editFavType={this.addFavType}/>\n                    </Menu.Item>\n                </Menu>\n                <div style = {checkLogin() ? {display : 'block'} : {display : 'none'}}>\n                    <Button type='link' style={{width:\"50%\"}} onClick={this.onAdd}>\n                        <PlusCircleOutlined style={{ fontSize: '20px'}}/>\n                    </Button>\n                    <Button type='link' style={{width:\"50%\"}} onClick={this.onDel}>\n                        <DeleteOutlined style={{ fontSize: '20px'}}/>\n                    </Button>\n                </div>\n            </Sider>\n        )\n    }\n}","import React, {Component} from 'react'\nimport {Card, Avatar, Rate, message, Modal} from 'antd';\nimport {EditOutlined, DeleteOutlined, FrownOutlined} from '@ant-design/icons';\n\nimport {reqUpdateItem, reqDelItem} from '../../../../../api'\nimport {checkLogin} from '../../../../../utils/userUtils'\nimport './favCard.less'\n\n/*\n左侧导航的组件\n */\nconst {Meta} = Card \nconst {confirm} = Modal\nexport default class FavouritesCard extends Component{\n    //编辑点击事件\n    onEdit = ()=>{\n        const {url, title, description, type, rank} = this.props\n        this.props.onEdit(url, title, description, type, rank)\n    }\n    //删除点击事件\n    onDel = ()=>{\n        confirm({\n            title: '是否确定删除?',\n            onOk:() => {\n                reqDelItem(this.props.url).then(data=>{\n                    if(data.status === '0'){\n                        message.success('删除成功！')\n                        this.props.update()\n                    }\n                })\n            },\n        });\n    }\n    //更新Rank事件\n    onRankChange = (value)=>{\n        const {url} = this.props\n        reqUpdateItem(url, undefined, undefined,value)\n    }\n\n    render(){\n        const {url, title, description, rank} = this.props\n        return(\n            <Card style={{maxWidth:'550px', minWidth:'200px'}}\n            headStyle={{minHeight:\"36px\"}} \n            actions={checkLogin() ? [\n                <EditOutlined key=\"edit\" onClick={this.onEdit}/>,\n                <DeleteOutlined key=\"delete\" onClick={this.onDel}/>,\n            ] : []}\n            title={<Rate disabled={!checkLogin()}  defaultValue={rank} onChange={this.onRankChange} \n                    style={{width:'100%', textAlign:\"center\"}}/>}\n            hoverable={true}\n            >\n                <Meta\n                avatar={\n                    <Avatar size={50} shape=\"square\"\n                    src={url+\"favicon.ico\"} icon={<FrownOutlined />}/>\n                }\n                title={title}\n                description={description}\n                onClick={()=>{window.open(url)}}/>\n            </Card>\n        )\n    }\n}","import React, {Component} from 'react'\nimport { Row,Col,Button,Tooltip,Modal,Form,Input,Rate,message,Select } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons'\n\nimport FavouritesCard from '../favCard/favCard'\nimport {reqUpdateItem, reqFavTypeList} from '../../../../../api'\nimport {checkLogin} from '../../../../../utils/userUtils'\n\n/*\n左侧导航的组件\n */\nconst { Option } = Select;\n\nexport default class CardContent extends Component{\n    state = {\n        showStatus:0,\n    }\n    formRef = React.createRef()\n    oldUrl = ''\n    //根据itemList获取card节点\n    getCardNodes = (itemList)=>{\n        return itemList.map(item => {\n            return(\n                <Col key={item.url}>\n                    <FavouritesCard url={item.url} title={item.title}\n                    description={item.description} type={item.type} rank={item.rank}\n                    update={this.props.update} onEdit={this.onEdit}/>\n                </Col>\n            )\n        })\n    }\n    //更新item\n    updateItem = ()=>{\n        this.formRef.current.validateFields().then(values => {\n            const {url, title, description, type, rank} = values\n            reqUpdateItem(url, type, title, rank, description, this.oldUrl).then(data=>{\n                if(data.status==='0'){\n                    this.props.update()\n                    this.afterUpdate()\n                    message.success('添加成功！')\n                }\n            })\n        }).catch(info => message.error('请正确填写信息！'));\n    }\n    //更新item后的收尾工作\n    afterUpdate = ()=>{\n        this.setState({showStatus:0})\n        this.formRef.current.resetFields();\n        this.oldUrl = ''\n    }\n    //开始编辑item\n    onEdit = (url, title, description, type, rank)=>{\n        this.oldUrl = url\n        reqFavTypeList().then(data=>{\n            //获取并设置typeOptions\n            let typeOptions = data.data.map(item => {\n                return <Option key={item.title} value={item.title}>{item.title}</Option>\n            })\n            //初始化其他信息\n            this.formRef.current.setFieldsValue({url, title, description, type, rank})\n            this.setState({typeOptions:typeOptions, showStatus:1})\n        })\n    }\n    \n    render(){\n        const {itemList} = this.props\n        const cardNodes = this.getCardNodes(itemList)\n        return(\n            <div>\n                <Row gutter={[16, 24]}>\n                    {cardNodes}\n                    <div style = {checkLogin() ? {display : 'block'} : {display : 'none'}}>\n                        <Tooltip title=\"添加一个\" >\n                            <Button icon={<PlusOutlined style={{fontSize:'50px', color:'#C0C0C0'}}/>} \n                            style={{height:'180px', width:'180px'}}\n                            onClick={()=>{this.onEdit('', '', '', this.props.favType, 3)}}/>\n                        </Tooltip>\n                    </div>\n                </Row>\n                <Modal forceRender title='收藏项信息' visible={this.state.showStatus===1} \n                onOk={()=>{this.updateItem()}} onCancel={this.afterAdd}>\n                    <Form ref={this.formRef}>\n                        <Form.Item name=\"url\"\n                        rules={[{required: true,message: '请输入URL'},]}>\n                            <Input placeholder=\"请输入URL\" />\n                        </Form.Item>\n                        <Form.Item name=\"title\"\n                        rules={[{required: true,message: '请输入标题'},]}>\n                            <Input placeholder=\"请输入标题\" />\n                        </Form.Item>\n                        <Form.Item name=\"description\"\n                        rules={[{required: true,message: '请输入相关描述'},]}>\n                            <Input placeholder=\"请输入相关描述\" />\n                        </Form.Item>\n                        <Form.Item name=\"type\">\n                            <Select>{this.state.typeOptions}</Select>\n                        </Form.Item>\n                        <Form.Item name=\"rank\">\n                            <Rate style={{margin:'auto 0'}}/>\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport { Layout } from 'antd'\n\nimport LeftNav from './components/leftNav/leftNav'\nimport CardContent from './components/cardContent/cardContent'\nimport {reqFavItemList} from '../../../api'\nimport './favourites.less'\n/*\n头部组件\n */\nconst { Content } = Layout;\nexport default class Favourites extends Component{\n    state = {\n        theme:'light',\n        itemList: [],\n    }\n    //同步并设置itemList和favType\n    onFavTypeChange = async(favType)=>{\n        const data = await reqFavItemList(favType)\n        const itemList = data.data\n        this.setState({itemList:itemList, favType:favType})\n    }\n\n    render(){\n        const {favType} = this.state\n        return(\n            <Layout className=\"favourites\">\n                <LeftNav onFavTypeChange={this.onFavTypeChange}/>\n                <Layout>\n                    <Content className=\"favourites-content\">\n                        <CardContent itemList={this.state.itemList}\n                        favType={this.state.favType}\n                        update={()=>this.onFavTypeChange(favType)}/>\n                    </Content>\n                </Layout>\n            </Layout>\n        )\n    }\n}","import {Component} from 'react'\nimport {Redirect, Route, Switch} from 'react-router-dom'\n\nimport Header from '../../components/header/header'\nimport Favourites from './favourites/favourites'\n/*\n工具页的路由组件\n*/ \nexport default class Tools extends Component {\n  render() {\n    return (\n      <div>\n        <Header/>\n        <Switch>\n          <Route path='/tools/favorites' component={Favourites}></Route>\n          <Redirect to='/'/>\n        </Switch>\n      </div>\n     );\n  }\n}"],"sourceRoot":""}