{"version":3,"sources":["pages/tools/favourites/components/favInput.jsx","pages/tools/favourites/components/favMenu.jsx","pages/tools/favourites/components/leftNav/leftNav.jsx","pages/tools/favourites/components/favCard/favCard.jsx","pages/tools/favourites/components/cardContent/cardContent.jsx","pages/tools/favourites/favourites.jsx","pages/tools/tools.jsx"],"names":["FavInput","input","React","createRef","onExit","props","editFavType","current","state","value","setState","this","focus","ref","onBlur","onPressEnter","blur","Component","FavMenu","onEdit","typeName","title","onDoubleClick","style","display","Sider","confirm","LeftNav","theme","menuList","onAddStatus","selectedMenu","dragingMenu","targetMenu","setSelectedMenu","onFavTypeChange","updateMenuList","reqFavTypeList","then","data","sMenu","listData","find","item","getRankFromTitle","rank","onDragStart","ev","target","childNodes","innerHTML","onDropOver","preventDefault","onDrop","reqMoveType","status","getMenuNodes","map","targetStyle","targetRank","borderTop","borderBottom","Item","draggable","onDragOver","onAdd","onDel","onOk","reqDelType","message","success","onSelect","key","oldTitle","newTitle","error","reqUpdateType","undefined","addFavType","length","push","menuNodes","width","className","mode","selectedKeys","disabled","checkLogin","type","onClick","PlusCircleOutlined","fontSize","DeleteOutlined","Meta","FavouritesCard","url","description","reqDelItem","update","onRankChange","reqUpdateItem","maxWidth","minWidth","headStyle","minHeight","actions","EditOutlined","defaultValue","onChange","textAlign","hoverable","avatar","size","shape","src","icon","FrownOutlined","window","open","Option","CardContent","showStatus","formRef","oldUrl","getCardNodes","itemList","updateItem","validateFields","values","afterUpdate","catch","info","resetFields","typeOptions","setFieldsValue","cardNodes","gutter","PlusOutlined","color","height","favType","forceRender","visible","onCancel","afterAdd","name","rules","required","placeholder","margin","Content","Favourites","a","reqFavItemList","Tools","path","component","to"],"mappings":"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","file":"static/js/4.4076d6f0.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport { Input } from 'antd';\n\n/*\n左侧导航的组件\n */\nexport default class FavInput extends Component{\n    input = React.createRef()\n\n    componentDidUpdate(){\n        this.input.current.focus()\n    }\n\n    onExit = ()=>{\n        this.props.editFavType(this.input.current.state.value)\n        this.input.current.setState({value:''})\n    }\n\n    render(){\n        return(\n            <Input ref={this.input} onBlur={this.onExit}\n            onPressEnter={()=>{this.input.current.blur()}}>\n            </Input>\n        )\n    }\n}","import React, {Component} from 'react'\n\nimport FavInput from './favInput'\n\n/*\n左侧导航的组件\n */\nexport default class FavMenu extends Component{\n    state={\n        onEdit:false\n    }\n\n    editFavType = (typeName)=>{\n        this.props.editFavType(this.props.title,typeName)\n        this.setState({onEdit:false})\n    }\n\n    onDoubleClick = ()=>{\n        this.setState({onEdit:true})\n    }\n\n    render(){\n        const {onEdit} = this.state\n        const {title} = this.props\n        return(\n            <div>\n                <div style={{display:onEdit ? 'none' : 'block'}} onDoubleClick={this.onDoubleClick}>\n                    {title}\n                </div>\n                <div style={{display:onEdit ? 'block' : 'none'}}>\n                    <FavInput editFavType={this.editFavType}/>\n                </div>\n            </div>\n        )\n    }\n}","import React, {Component} from 'react'\nimport {Layout, Menu, Button, message, Modal} from 'antd'\nimport {\n    PlusCircleOutlined,\n    DeleteOutlined,\n  } from '@ant-design/icons';\n\nimport {reqFavTypeList, reqDelType, reqUpdateType, reqMoveType} from '../../../../../api'\nimport {checkLogin} from '../../../../../utils/userUtils'\nimport FavInput from '../favInput'\nimport FavMenu from '../favMenu'\n/*\n左侧导航的组件\n */\nconst {Sider} = Layout;\nconst {confirm} = Modal\n\nexport default class LeftNav extends Component{\n    state={\n        theme:'light',\n        menuList:[],\n        onAddStatus: false,\n        selectedMenu:'',\n        dragingMenu:{},\n        targetMenu:{},\n    }\n    //组件加载后更新MenuList\n    componentDidMount(){\n        this.updateMenuList()\n    }\n    //设置被选中菜单\n    setSelectedMenu = (title)=>{\n        this.setState({selectedMenu:title})\n        this.props.onFavTypeChange(title)\n    }\n    //更新菜单列表\n    updateMenuList = ()=>{\n        reqFavTypeList().then(data=>{\n            const sMenu = this.state.selectedMenu\n            const listData = data.data\n            this.setState({menuList:listData})\n            //更新后，若selectedMenu不在menuList中，重置selectedMenu\n            if( (!sMenu || !listData.find(item=>item.title===sMenu)) && listData[0]){\n                this.setSelectedMenu(listData[0].title)\n            }\n        })\n    }\n    //根据Title获得Rank\n    getRankFromTitle = (title)=>{\n        const item = this.state.menuList.find(item=>item.title===title)\n        return item.rank\n    }\n    //开始拖动事件\n    onDragStart = (ev)=>{\n        //获取并设置dragingMenu于state\n        const dragingMenu = ev.target.childNodes[0].childNodes[0].innerHTML\n        this.setState({dragingMenu:dragingMenu})\n    }\n    //拖动中，悬浮事件\n    onDropOver = (ev)=>{\n        ev.preventDefault()\n        //获取并设置targetMenu于state\n        const {dragingMenu} = this.state\n        const targetMenu = ev.target.innerHTML\n        if(dragingMenu !== targetMenu)this.setState({targetMenu:targetMenu})\n    }\n    //拖动结束事件\n    onDrop = (ev)=>{\n        //进行移动排序操作\n        const {targetMenu, dragingMenu} = this.state\n        reqMoveType(dragingMenu, targetMenu).then(data=>{\n            if(data.status === '0')this.updateMenuList()\n        })\n        this.setState({targetMenu:{}, dragingMenu:{}})//初始化相关state\n    }\n    //由menuList获得用于渲染的menu节点\n    getMenuNodes = (menuList)=>{\n        const {targetMenu, dragingMenu} = this.state\n        return menuList.map(item => {\n            let targetStyle = {}\n            //由rank判断并设置targetStyle\n            if(targetMenu===item.title){\n                const targetRank = this.getRankFromTitle(targetMenu)\n                const dragingRank = this.getRankFromTitle(dragingMenu)\n                if(dragingRank>targetRank)targetStyle = {borderTop:\"2px dashed #1890ff\"}\n                else targetStyle = {borderBottom:\"2px dashed #1890ff\"}\n            }\n            return(\n                <Menu.Item key={item.title} style={targetStyle} draggable={true} \n                onDragStart={this.onDragStart} onDragOver={this.onDropOver}\n                onDrop={this.onDrop}\n                >\n                    <FavMenu title={item.title} editFavType={this.editFavType}/>\n                </Menu.Item>\n            )\n        })\n    }\n    //添加点击事件\n    onAdd = ()=>this.setState({onAddStatus:true})\n    //删除点击事件\n    onDel = ()=>{\n        confirm({\n            title: '是否确定删除?',\n            onOk:() => {\n                reqDelType(this.state.selectedMenu).then(data=>{\n                    if(data.status === '0'){\n                        message.success('删除成功！')\n                        this.updateMenuList()\n                    }\n                })\n            },\n        });\n    }\n    //menu选择事件，设置selectedMenu\n    onSelect = (value)=>this.setSelectedMenu(value.key)\n    //编辑菜单项Title\n    editFavType = (oldTitle, newTitle)=>{\n        //判断是否与已有名称相同\n        if(this.state.menuList.find(item=>item.title===newTitle)){\n            message.error('已有相同类别，请更换一个！')\n            return\n        }else if(newTitle){\n            reqUpdateType(newTitle,undefined,oldTitle).then(data=>{\n                if(data.status === '0'){\n                    message.success('修改成功！')\n                    this.updateMenuList()\n                    if(oldTitle === this.state.selectedMenu)this.setState({selectedMenu:newTitle})\n                }\n            })\n        }\n    }\n    //添加菜单项\n    addFavType = (typeName)=>{\n        let {menuList} = this.state\n        if(menuList.find(item=>item.title===typeName)){\n            message.error('已有相同类别，请更换一个！')\n        }else if(typeName){\n            const rank = menuList.length\n            reqUpdateType(typeName, rank).then(data=>{\n                if(data.status === '0'){\n                    message.success('添加成功！')\n                    menuList.push({rank:rank, title:typeName})\n                    this.setState({menuList:menuList})\n                }\n            })\n        }\n        this.setState({onAddStatus:false})\n    }\n\n    render(){\n        const {menuList, onAddStatus, selectedMenu} = this.state\n        const menuNodes = this.getMenuNodes(menuList)\n        return(\n            <Sider width='150' className=\"favourites-sider\" theme={this.state.theme}>\n                <Menu className=\"favourites-sider-menu\" mode=\"inline\"\n                selectedKeys={[selectedMenu]}\n                onSelect={this.onSelect}>\n                    {menuNodes}\n                    <Menu.Item  key='new-menu' disabled style={{display:onAddStatus ? 'block' : 'none'}}>\n                        <FavInput editFavType={this.addFavType}/>\n                    </Menu.Item>\n                </Menu>\n                <div style = {checkLogin() ? {display : 'block'} : {display : 'none'}}>\n                    <Button type='link' style={{width:\"50%\"}} onClick={this.onAdd}>\n                        <PlusCircleOutlined style={{ fontSize: '20px'}}/>\n                    </Button>\n                    <Button type='link' style={{width:\"50%\"}} onClick={this.onDel}>\n                        <DeleteOutlined style={{ fontSize: '20px'}}/>\n                    </Button>\n                </div>\n            </Sider>\n        )\n    }\n}","import React, {Component} from 'react'\nimport {Card, Avatar, Rate, message, Modal} from 'antd';\nimport {EditOutlined, DeleteOutlined, FrownOutlined} from '@ant-design/icons';\n\nimport {reqUpdateItem, reqDelItem} from '../../../../../api'\nimport {checkLogin} from '../../../../../utils/userUtils'\nimport './favCard.less'\n\n/*\n左侧导航的组件\n */\nconst {Meta} = Card \nconst {confirm} = Modal\nexport default class FavouritesCard extends Component{\n    //编辑点击事件\n    onEdit = ()=>{\n        const {url, title, description, type, rank} = this.props\n        this.props.onEdit(url, title, description, type, rank)\n    }\n    //删除点击事件\n    onDel = ()=>{\n        confirm({\n            title: '是否确定删除?',\n            onOk:() => {\n                reqDelItem(this.props.url).then(data=>{\n                    if(data.status === '0'){\n                        message.success('删除成功！')\n                        this.props.update()\n                    }\n                })\n            },\n        });\n    }\n    //更新Rank事件\n    onRankChange = (value)=>{\n        const {url} = this.props\n        reqUpdateItem(url, undefined, undefined,value)\n    }\n\n    render(){\n        const {url, title, description, rank} = this.props\n        return(\n            <Card style={{maxWidth:'550px', minWidth:'200px'}}\n            headStyle={{minHeight:\"36px\"}} \n            actions={checkLogin() ? [\n                <EditOutlined key=\"edit\" onClick={this.onEdit}/>,\n                <DeleteOutlined key=\"delete\" onClick={this.onDel}/>,\n            ] : []}\n            title={<Rate disabled={!checkLogin()}  defaultValue={rank} onChange={this.onRankChange} \n                    style={{width:'100%', textAlign:\"center\"}}/>}\n            hoverable={true}\n            >\n                <Meta\n                avatar={\n                    <Avatar size={50} shape=\"square\"\n                    src={url+\"favicon.ico\"} icon={<FrownOutlined />}/>\n                }\n                title={title}\n                description={description}\n                onClick={()=>{window.open(url)}}/>\n            </Card>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Row, Col, Button, Modal, Form, Input, Rate, message, Select } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons'\n\nimport FavouritesCard from '../favCard/favCard'\nimport { reqUpdateItem, reqFavTypeList } from '../../../../../api'\nimport { checkLogin } from '../../../../../utils/userUtils'\n\n/*\n左侧导航的组件\n */\nconst { Option } = Select;\n\nexport default class CardContent extends Component {\n  state = {\n    showStatus: 0,\n  }\n  formRef = React.createRef()\n  oldUrl = ''\n  //根据itemList获取card节点\n  getCardNodes = (itemList) => {\n    return itemList.map(item => {\n      return (\n        <Col key={item.url}>\n          <FavouritesCard url={item.url} title={item.title}\n            description={item.description} type={item.type} rank={item.rank}\n            update={this.props.update} onEdit={this.onEdit} />\n        </Col>\n      )\n    })\n  }\n  //更新item\n  updateItem = () => {\n    this.formRef.current.validateFields().then(values => {\n      const { url, title, description, type, rank } = values\n      reqUpdateItem(url, type, title, rank, description, this.oldUrl).then(data => {\n        if (data.status === '0') {\n          this.props.update()\n          this.afterUpdate()\n          message.success('添加成功！')\n        }\n      })\n    }).catch(info => message.error('请正确填写信息！'));\n  }\n  //更新item后的收尾工作\n  afterUpdate = () => {\n    this.setState({ showStatus: 0 })\n    this.formRef.current.resetFields();\n    this.oldUrl = ''\n  }\n  //开始编辑item\n  onEdit = (url, title, description, type, rank) => {\n    this.oldUrl = url\n    reqFavTypeList().then(data => {\n      //获取并设置typeOptions\n      let typeOptions = data.data.map(item => {\n        return <Option key={item.title} value={item.title}>{item.title}</Option>\n      })\n      //初始化其他信息\n      this.formRef.current.setFieldsValue({ url, title, description, type, rank })\n      this.setState({ typeOptions: typeOptions, showStatus: 1 })\n    })\n  }\n\n  render() {\n    const { itemList } = this.props\n    const cardNodes = this.getCardNodes(itemList)\n    return (\n      <div>\n        <Row gutter={[16, 24]}>\n          {cardNodes}\n          <div style={checkLogin() ? { display: 'block' } : { display: 'none' }}>\n            <Button icon={<PlusOutlined style={{ fontSize: '50px', color: '#C0C0C0' }} />}\n              style={{ height: '180px', width: '180px' }}\n              onClick={() => { this.onEdit('', '', '', this.props.favType, 3) }} />\n          </div>\n        </Row>\n        <Modal forceRender title='收藏项信息' visible={this.state.showStatus === 1}\n          onOk={() => { this.updateItem() }} onCancel={this.afterAdd}>\n          <Form ref={this.formRef}>\n            <Form.Item name=\"url\"\n              rules={[{ required: true, message: '请输入URL' },]}>\n              <Input placeholder=\"请输入URL\" />\n            </Form.Item>\n            <Form.Item name=\"title\"\n              rules={[{ required: true, message: '请输入标题' },]}>\n              <Input placeholder=\"请输入标题\" />\n            </Form.Item>\n            <Form.Item name=\"description\"\n              rules={[{ required: true, message: '请输入相关描述' },]}>\n              <Input placeholder=\"请输入相关描述\" />\n            </Form.Item>\n            <Form.Item name=\"type\">\n              <Select>{this.state.typeOptions}</Select>\n            </Form.Item>\n            <Form.Item name=\"rank\">\n              <Rate style={{ margin: 'auto 0' }} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { Layout } from 'antd'\n\nimport LeftNav from './components/leftNav/leftNav'\nimport CardContent from './components/cardContent/cardContent'\nimport { reqFavItemList } from '../../../api'\nimport './favourites.less'\n/*\n头部组件\n */\nconst { Content } = Layout;\nexport default class Favourites extends Component {\n  state = {\n    theme: 'light',\n    itemList: [],\n  }\n  //同步并设置itemList和favType\n  onFavTypeChange = async (favType) => {\n    const data = await reqFavItemList(favType)\n    const itemList = data.data\n    this.setState({ itemList: itemList, favType: favType })\n  }\n\n  render() {\n    const { favType } = this.state\n    return (\n      <Layout className=\"favourites\">\n        <LeftNav onFavTypeChange={this.onFavTypeChange} />\n        <Layout>\n          <Content className=\"favourites-content\">\n            <CardContent itemList={this.state.itemList}\n              favType={this.state.favType}\n              update={() => this.onFavTypeChange(favType)} />\n          </Content>\n        </Layout>\n      </Layout>\n    )\n  }\n}","import { Component } from 'react'\nimport { Redirect, Route, Switch } from 'react-router-dom'\n\nimport Favourites from './favourites/favourites'\n/*\n工具页的路由组件\n*/\nexport default class Tools extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route path='/tools/favorites' component={Favourites}></Route>\n          <Redirect to='/' />\n        </Switch>\n      </div>\n    );\n  }\n}"],"sourceRoot":""}