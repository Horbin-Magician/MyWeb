{"version":3,"sources":["api/favouritesAPI.js","pages/tools/favourites/components/favInput.jsx","pages/tools/favourites/components/favMenu.jsx","pages/tools/favourites/components/leftNav/leftNav.jsx","pages/tools/favourites/components/favCard/favCard.jsx","pages/tools/favourites/components/cardContent/cardContent.jsx","pages/tools/favourites/favourites.jsx","pages/tools/tools.jsx"],"names":["reqFavTypeList","ajax","reqUpdateType","title","rank","oldTitle","undefined","reqFavItemList","favType","reqDelItem","url","reqUpdateItem","iconUrl","description","oldUrl","FavInput","input","React","createRef","onExit","props","editFavType","current","state","value","setState","this","focus","ref","onBlur","onPressEnter","blur","Component","FavMenu","onEdit","typeName","onDoubleClick","style","display","Sider","confirm","LeftNav","setSelectedMenu","selectedMenu","onFavTypeChange","updateMenuList","then","data","sMenu","listData","menuList","find","item","getRankFromTitle","onDragStart","ev","dragingMenu","target","childNodes","innerHTML","onDropOver","preventDefault","targetMenu","onDrop","fType","tType","status","getMenuNodes","map","targetStyle","targetRank","borderTop","borderBottom","Item","draggable","onDragOver","onAdd","onAddStatus","onDel","onOk","message","success","onSelect","key","newTitle","error","addFavType","length","push","theme","addUpdateFun","forceUpdate","menuNodes","breakpoint","width","collapsedWidth","zeroWidthTriggerStyle","right","top","className","mode","selectedKeys","disabled","checkLogin","type","onClick","PlusCircleOutlined","fontSize","DeleteOutlined","Meta","FavouritesCard","update","onRankChange","maxWidth","minWidth","headStyle","minHeight","actions","EditOutlined","defaultValue","onChange","textAlign","hoverable","avatar","size","shape","marginTop","src","icon","FrownOutlined","window","open","Option","CardContent","getCardNodes","itemList","xs","sm","md","lg","updateItem","formRef","validateFields","values","afterUpdate","catch","info","showStatus","resetFields","typeOptions","setFieldsValue","cardNodes","gutter","PlusOutlined","color","height","forceRender","visible","onCancel","name","rules","required","placeholder","margin","Content","Favourites","a","Tools","path","component"],"mappings":"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","file":"static/js/13.5192d37c.chunk.js","sourcesContent":["/*\n包含应用中所有与收藏夹有关的api\n */\nimport ajax from './ajax'\n\n\n//获取收藏类\nexport const reqFavTypeList = () => {\n  return ajax('/api/favourites/favtype', {'type':'get'}, 'POST')\n}\n//删除收藏类\nexport const reqDelType = (title) => {\n  return ajax('/api/favourites/favtype', {'type':'del', title}, 'POST')\n}\n//更新收藏类\nexport const reqUpdateType = (title, rank, oldTitle=undefined) => {\n  return ajax('/api/favourites/favtype', {'type':'update', title, rank, oldTitle}, 'POST')\n}\n//移动收藏类\nexport const reqMoveType = (fType, tType) => {\n  return ajax('/api/favourites/favtype', {'type':'move', fType, tType}, 'POST')\n}\n//获取收藏项\nexport const reqFavItemList = (favType=undefined) => ajax('/api/favourites/favitem', {'type':'get', favType}, 'POST')\n//删除收藏项\nexport const reqDelItem = (url) => ajax('/api/favourites/favitem', {'type':'del', url}, 'POST')\n//更新收藏项\nexport const reqUpdateItem = (url, favType, title, rank, iconUrl, description, oldUrl=undefined) => {\n  return ajax('/api/favourites/favitem', {'type':'update', url, favType, title, rank, iconUrl, description, oldUrl}, 'POST')\n}","import React, {Component} from 'react'\nimport { Input } from 'antd';\n\n/*\n左侧导航的组件\n */\nexport default class FavInput extends Component{\n    input = React.createRef()\n\n    componentDidUpdate(){\n        this.input.current.focus()\n    }\n\n    onExit = ()=>{\n        this.props.editFavType(this.input.current.state.value)\n        this.input.current.setState({value:''})\n    }\n\n    render(){\n        return(\n            <Input ref={this.input} onBlur={this.onExit}\n            onPressEnter={()=>{this.input.current.blur()}}>\n            </Input>\n        )\n    }\n}","import React, {Component} from 'react'\n\nimport FavInput from './favInput'\n\n/*\n左侧导航的组件\n */\nexport default class FavMenu extends Component{\n    state={\n        onEdit:false\n    }\n\n    editFavType = (typeName)=>{\n        this.props.editFavType(this.props.title,typeName)\n        this.setState({onEdit:false})\n    }\n\n    onDoubleClick = ()=>{\n        this.setState({onEdit:true})\n    }\n\n    render(){\n        const {onEdit} = this.state\n        const {title} = this.props\n        return(\n            <div>\n                <div style={{display:onEdit ? 'none' : 'block'}} onDoubleClick={this.onDoubleClick}>\n                    {title}\n                </div>\n                <div style={{display:onEdit ? 'block' : 'none'}}>\n                    <FavInput editFavType={this.editFavType}/>\n                </div>\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Layout, Menu, Button, message, Modal } from 'antd'\nimport {\n  PlusCircleOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\n\nimport { reqFavTypeList, reqDelType, reqUpdateType, reqMoveType } from '../../../../../api/favouritesAPI'\nimport { checkLogin, addUpdateFun } from '../../../../../utils/userUtils'\nimport FavInput from '../favInput'\nimport FavMenu from '../favMenu'\n/*\n左侧导航的组件\n */\nconst { Sider } = Layout;\nconst { confirm } = Modal\n\nexport default class LeftNav extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      theme: 'light',\n      menuList: [],\n      onAddStatus: false,\n      selectedMenu: '',\n      dragingMenu: {},\n      targetMenu: {},\n    }\n    addUpdateFun(() => this.forceUpdate())\n  }\n  //组件加载后更新MenuList\n  componentDidMount() {\n    this.updateMenuList()\n  }\n  //设置被选中菜单\n  setSelectedMenu = (title) => {\n    this.setState({ selectedMenu: title })\n    this.props.onFavTypeChange(title)\n  }\n  //更新菜单列表\n  updateMenuList = () => {\n    reqFavTypeList().then(data => {\n      const sMenu = this.state.selectedMenu\n      const listData = data.data\n      this.setState({ menuList: listData })\n      //更新后，若selectedMenu不在menuList中，重置selectedMenu\n      if ((!sMenu || !listData.find(item => item.title === sMenu)) && listData[0]) {\n        this.setSelectedMenu(listData[0].title)\n      }\n    })\n  }\n  //根据Title获得Rank\n  getRankFromTitle = (title) => {\n    const item = this.state.menuList.find(item => item.title === title)\n    return item.rank\n  }\n  //开始拖动事件\n  onDragStart = (ev) => {\n    //获取并设置dragingMenu于state\n    const dragingMenu = ev.target.childNodes[0].childNodes[0].innerHTML\n    this.setState({ dragingMenu: dragingMenu })\n  }\n  //拖动中，悬浮事件\n  onDropOver = (ev) => {\n    ev.preventDefault()\n    //获取并设置targetMenu于state\n    const { dragingMenu } = this.state\n    const targetMenu = ev.target.innerHTML\n    if (dragingMenu !== targetMenu) this.setState({ targetMenu: targetMenu })\n  }\n  //拖动结束事件\n  onDrop = (ev) => {\n    //进行移动排序操作\n    const { targetMenu, dragingMenu } = this.state\n    reqMoveType(dragingMenu, targetMenu).then(data => {\n      if (data.status === '0') this.updateMenuList()\n    })\n    this.setState({ targetMenu: {}, dragingMenu: {} })//初始化相关state\n  }\n  //由menuList获得用于渲染的menu节点\n  getMenuNodes = (menuList) => {\n    const { targetMenu, dragingMenu } = this.state\n    return menuList.map(item => {\n      let targetStyle = {}\n      //由rank判断并设置targetStyle\n      if (targetMenu === item.title) {\n        const targetRank = this.getRankFromTitle(targetMenu)\n        const dragingRank = this.getRankFromTitle(dragingMenu)\n        if (dragingRank > targetRank) targetStyle = { borderTop: \"2px dashed #1890ff\" }\n        else targetStyle = { borderBottom: \"2px dashed #1890ff\" }\n      }\n      return (\n        <Menu.Item key={item.title} style={targetStyle} draggable={true}\n          onDragStart={this.onDragStart} onDragOver={this.onDropOver}\n          onDrop={this.onDrop}\n        >\n          <FavMenu title={item.title} editFavType={this.editFavType} />\n        </Menu.Item>\n      )\n    })\n  }\n  //添加点击事件\n  onAdd = () => this.setState({ onAddStatus: true })\n  //删除点击事件\n  onDel = () => {\n    confirm({\n      title: '是否确定删除?',\n      onOk: () => {\n        reqDelType(this.state.selectedMenu).then(data => {\n          if (data.status === '0') {\n            message.success('删除成功！')\n            this.updateMenuList()\n          }\n        })\n      },\n    });\n  }\n  //menu选择事件，设置selectedMenu\n  onSelect = (value) => this.setSelectedMenu(value.key)\n  //编辑菜单项Title\n  editFavType = (oldTitle, newTitle) => {\n    //判断是否与已有名称相同\n    if (this.state.menuList.find(item => item.title === newTitle)) {\n      message.error('已有相同类别，请更换一个！')\n      return\n    } else if (newTitle) {\n      reqUpdateType(newTitle, undefined, oldTitle).then(data => {\n        if (data.status === '0') {\n          message.success('修改成功！')\n          this.updateMenuList()\n          if (oldTitle === this.state.selectedMenu) this.setState({ selectedMenu: newTitle })\n        }\n      })\n    }\n  }\n  //添加菜单项\n  addFavType = (typeName) => {\n    let { menuList } = this.state\n    if (menuList.find(item => item.title === typeName)) {\n      message.error('已有相同类别，请更换一个！')\n    } else if (typeName) {\n      const rank = menuList.length\n      reqUpdateType(typeName, rank).then(data => {\n        if (data.status === '0') {\n          message.success('添加成功！')\n          menuList.push({ rank: rank, title: typeName })\n          this.setState({ menuList: menuList })\n        }\n      })\n    }\n    this.setState({ onAddStatus: false })\n  }\n\n  render() {\n    const { menuList, onAddStatus, selectedMenu } = this.state\n    const menuNodes = this.getMenuNodes(menuList)\n    return (\n      <Sider breakpoint=\"sm\" width='150px' collapsedWidth=\"0px\"\n      zeroWidthTriggerStyle={{width:'20px',right:'-20px',top:'300px'}}\n       className=\"favourites-sider\" theme={this.state.theme}>\n        <Menu className=\"favourites-sider-menu\" mode=\"inline\"\n          selectedKeys={[selectedMenu]}\n          onSelect={this.onSelect}>\n          {menuNodes}\n          <Menu.Item key='new-menu' disabled style={{ display: onAddStatus ? 'block' : 'none' }}>\n            <FavInput editFavType={this.addFavType} />\n          </Menu.Item>\n        </Menu>\n        <div style={checkLogin() ? { display: 'block' } : { display: 'none' }}>\n          <Button type='link' style={{ width: \"50%\" }} onClick={this.onAdd}>\n            <PlusCircleOutlined style={{ fontSize: '20px' }} />\n          </Button>\n          <Button type='link' style={{ width: \"50%\" }} onClick={this.onDel}>\n            <DeleteOutlined style={{ fontSize: '20px' }} />\n          </Button>\n        </div>\n      </Sider>\n    )\n  }\n}","import React, {Component} from 'react'\nimport {Card, Avatar, Rate, message, Modal} from 'antd';\nimport {EditOutlined, DeleteOutlined, FrownOutlined} from '@ant-design/icons';\n\nimport {reqUpdateItem, reqDelItem} from '../../../../../api/favouritesAPI'\nimport {checkLogin} from '../../../../../utils/userUtils'\nimport './favCard.less'\n\n/*\n左侧导航的组件\n */\nconst {Meta} = Card \nconst {confirm} = Modal\nexport default class FavouritesCard extends Component{\n    //编辑点击事件\n    onEdit = ()=>{\n        const {url, title, description, type, rank, iconUrl} = this.props\n        this.props.onEdit(url, title, description, type, rank, iconUrl)\n    }\n    //删除点击事件\n    onDel = ()=>{\n        confirm({\n            title: '是否确定删除?',\n            onOk:() => {\n                reqDelItem(this.props.url).then(data=>{\n                    if(data.status === '0'){\n                        message.success('删除成功！')\n                        this.props.update()\n                    }\n                })\n            },\n        });\n    }\n    //更新Rank事件\n    onRankChange = (value)=>{\n        const {url} = this.props\n        reqUpdateItem(url, undefined, undefined,value)\n    }\n\n    render(){\n        const {url, title, iconUrl, description, rank} = this.props\n        return(\n            <Card style={{maxWidth:'550px', minWidth:'200px'}}\n            headStyle={{minHeight:\"36px\"}} \n            actions={checkLogin() ? [\n                <EditOutlined key=\"edit\" onClick={this.onEdit}/>,\n                <DeleteOutlined key=\"delete\" onClick={this.onDel}/>,\n            ] : []}\n            title={<Rate disabled={!checkLogin()}  defaultValue={rank} onChange={this.onRankChange} \n                    style={{width:'100%', textAlign:\"center\"}}/>}\n            hoverable={true}\n            >\n                <Meta\n                avatar={\n                    <Avatar size={32} shape=\"square\" style={{marginTop:'10px'}}\n                    src={iconUrl?iconUrl:url+\"favicon.ico\"} icon={<FrownOutlined />}/>\n                }\n                title={title}\n                description={description}\n                onClick={()=>{window.open(url)}}/>\n            </Card>\n        )\n    }\n}","import React, { Component } from 'react'\nimport { Row, Col, Button, Modal, Form, Input, Rate, message, Select } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons'\n\nimport FavouritesCard from '../favCard/favCard'\nimport { reqUpdateItem, reqFavTypeList } from '../../../../../api/favouritesAPI'\nimport { checkLogin,addUpdateFun } from '../../../../../utils/userUtils'\n\n/*\n左侧导航的组件\n */\nconst { Option } = Select;\n\nexport default class CardContent extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      showStatus: 0,\n    }\n    this.formRef = React.createRef()\n    this.oldUrl = ''\n    addUpdateFun(()=>this.forceUpdate())\n  }\n\n  //根据itemList获取card节点\n  getCardNodes = (itemList) => {\n    return itemList.map(item => {\n      return (\n        <Col xs={24} sm={24} md={12} lg={6} key={item.url}>\n          <FavouritesCard url={item.url} title={item.title} iconUrl={item.iconUrl}\n            description={item.description} type={item.type} rank={item.rank}\n            update={this.props.update} onEdit={this.onEdit} />\n        </Col>\n      )\n    })\n  }\n  //更新item\n  updateItem = () => {\n    this.formRef.current.validateFields().then(values => {\n      const { url, title, description, type, rank, iconUrl } = values\n      reqUpdateItem(url, type, title, rank, iconUrl, description, this.oldUrl).then(data => {\n        if (data.status === '0') {\n          this.props.update()\n          this.afterUpdate()\n          message.success('更新成功！')\n        }\n      })\n    }).catch(info => message.error('请正确填写信息！'));\n  }\n  //更新item后的收尾工作\n  afterUpdate = () => {\n    this.setState({ showStatus: 0 })\n    this.formRef.current.resetFields();\n    this.oldUrl = ''\n  }\n  //开始编辑item\n  onEdit = (url, title, description, type, rank, iconUrl) => {\n    this.oldUrl = url\n    reqFavTypeList().then(data => {\n      //获取并设置typeOptions\n      let typeOptions = data.data.map(item => {\n        return <Option key={item.title} value={item.title}>{item.title}</Option>\n      })\n      //初始化其他信息\n      this.formRef.current.setFieldsValue({ url, title, description, type, rank, iconUrl })\n      this.setState({ typeOptions: typeOptions, showStatus: 1 })\n    })\n  }\n\n  render() {\n    const { itemList } = this.props\n    const cardNodes = this.getCardNodes(itemList)\n    return (\n      <div>\n        <Row gutter={[{ xs: 8, sm: 16, md: 16, lg: 24 },{ xs: 8, sm: 16, md: 16, lg: 24 }]} >\n          {cardNodes}\n          <div style={checkLogin() ? { display: 'block' } : { display: 'none' }}>\n            <Button icon={<PlusOutlined style={{ fontSize: '50px', color: '#C0C0C0' }} />}\n              style={{ height: '180px', width: '180px' }}\n              onClick={() => { this.onEdit('', '', '', this.props.favType, 3) }} />\n          </div>\n        </Row>\n        <Modal forceRender title='收藏项信息' visible={this.state.showStatus === 1}\n          onOk={() => { this.updateItem() }} onCancel={this.afterUpdate}>\n          <Form ref={this.formRef}>\n            <Form.Item name=\"url\"\n              rules={[{ required: true, message: '请输入URL' },]}>\n              <Input placeholder=\"请输入URL\" />\n            </Form.Item>\n            <Form.Item name=\"title\"\n              rules={[{ required: true, message: '请输入标题' },]}>\n              <Input placeholder=\"请输入标题\" />\n            </Form.Item>\n            <Form.Item name=\"description\"\n              rules={[{ required: true, message: '请输入相关描述' },]}>\n              <Input placeholder=\"请输入相关描述\" />\n            </Form.Item>\n            <Form.Item name=\"iconUrl\">\n              <Input placeholder=\"请输入IconURL，可为空\" />\n            </Form.Item>\n            <Form.Item name=\"type\">\n              <Select>{this.state.typeOptions}</Select>\n            </Form.Item>\n            <Form.Item name=\"rank\">\n              <Rate style={{ margin: 'auto 0' }} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport { Layout } from 'antd'\n\nimport LeftNav from './components/leftNav/leftNav'\nimport CardContent from './components/cardContent/cardContent'\nimport { reqFavItemList } from '../../../api/favouritesAPI'\nimport './favourites.less'\n/*\n头部组件\n */\nconst { Content } = Layout;\nexport default class Favourites extends Component {\n  state = {\n    theme: 'light',\n    itemList: [],\n  }\n  //同步并设置itemList和favType\n  onFavTypeChange = async (favType) => {\n    const data = await reqFavItemList(favType)\n    const itemList = data.data\n    this.setState({ itemList: itemList, favType: favType })\n  }\n\n  render() {\n    const { favType } = this.state\n    return (\n      <Layout className=\"favourites\">\n        <LeftNav onFavTypeChange={this.onFavTypeChange} />\n        <Layout>\n          <Content className=\"favourites-content\">\n            <CardContent itemList={this.state.itemList}\n              favType={this.state.favType}\n              update={() => this.onFavTypeChange(favType)} />\n          </Content>\n        </Layout>\n      </Layout>\n    )\n  }\n}","import { Component } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nimport Favourites from './favourites/favourites'\n/*\n工具页的路由组件\n*/\nexport default class Tools extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route path='/tools/favorites' component={Favourites}></Route>\n        </Switch>\n      </div>\n    );\n  }\n}"],"sourceRoot":""}