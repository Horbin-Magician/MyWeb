{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\n\nvar _jsxFileName = \"/home/horbin/Project/Web/my-web/Client/src/pages/tools/favourites/components/leftNav/learn.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useCallback, useRef } from 'react';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst type = 'DragableBodyRow';\n\nconst DragableBodyRow = ({\n  index,\n  moveRow,\n  className,\n  style,\n  ...restProps\n}) => {\n  _s();\n\n  const ref = useRef();\n  const [{\n    isOver,\n    dropClassName\n  }, drop] = useDrop({\n    accept: type,\n    collect: monitor => {\n      const {\n        index: dragIndex\n      } = monitor.getItem() || {};\n\n      if (dragIndex === index) {\n        return {};\n      }\n\n      return {\n        isOver: monitor.isOver(),\n        dropClassName: dragIndex < index ? ' drop-over-downward' : ' drop-over-upward'\n      };\n    },\n    drop: item => {\n      moveRow(item.index, index);\n    }\n  });\n  const [, drag] = useDrag({\n    type,\n    item: {\n      index\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drop(drag(ref));\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    ref: ref,\n    className: `${className}${isOver ? dropClassName : ''}`,\n    style: {\n      cursor: 'move',\n      ...style\n    },\n    ...restProps\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DragableBodyRow, \"RQ/gfEoGCM1Zl9t7zflUIqwIZls=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c = DragableBodyRow;\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  key: 'name'\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n  key: 'age'\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n  key: 'address'\n}];\n\nconst DragSortingTable = () => {\n  _s2();\n\n  const [data, setData] = useState([{\n    key: '1',\n    name: 'John Brown',\n    age: 32,\n    address: 'New York No. 1 Lake Park'\n  }, {\n    key: '2',\n    name: 'Jim Green',\n    age: 42,\n    address: 'London No. 1 Lake Park'\n  }, {\n    key: '3',\n    name: 'Joe Black',\n    age: 32,\n    address: 'Sidney No. 1 Lake Park'\n  }]);\n  const components = {\n    body: {\n      row: DragableBodyRow\n    }\n  };\n  const moveRow = useCallback((dragIndex, hoverIndex) => {\n    const dragRow = data[dragIndex];\n    setData(update(data, {\n      $splice: [[dragIndex, 1], [hoverIndex, 0, dragRow]]\n    }));\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(_Table, {\n      columns: columns,\n      dataSource: data,\n      components: components,\n      onRow: (record, index) => ({\n        index,\n        moveRow\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(DragSortingTable, \"hT5afZjf+w9XYHXG89m4N/9xsK8=\");\n\n_c2 = DragSortingTable;\nexport default DragSortingTable; // ReactDOM.render(<DragSortingTable />, mountNode);\n// #components-table-demo-drag-sorting tr.drop-over-downward td {\n//   border-bottom: 2px dashed #1890ff;\n// }\n// #components-table-demo-drag-sorting tr.drop-over-upward td {\n//   border-top: 2px dashed #1890ff;\n// }\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DragableBodyRow\");\n$RefreshReg$(_c2, \"DragSortingTable\");","map":{"version":3,"sources":["/home/horbin/Project/Web/my-web/Client/src/pages/tools/favourites/components/leftNav/learn.jsx"],"names":["React","useState","useCallback","useRef","DndProvider","useDrag","useDrop","HTML5Backend","update","type","DragableBodyRow","index","moveRow","className","style","restProps","ref","isOver","dropClassName","drop","accept","collect","monitor","dragIndex","getItem","item","drag","isDragging","cursor","columns","title","dataIndex","key","DragSortingTable","data","setData","name","age","address","components","body","row","hoverIndex","dragRow","$splice","record"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { Table } from 'antd';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport update from 'immutability-helper';\n\nconst type = 'DragableBodyRow';\n\nconst DragableBodyRow = ({ index, moveRow, className, style, ...restProps }) => {\n  const ref = useRef();\n  const [{ isOver, dropClassName }, drop] = useDrop({\n    accept: type,\n    collect: monitor => {\n      const { index: dragIndex } = monitor.getItem() || {};\n      if (dragIndex === index) {\n        return {};\n      }\n      return {\n        isOver: monitor.isOver(),\n        dropClassName: dragIndex < index ? ' drop-over-downward' : ' drop-over-upward',\n      };\n    },\n    drop: item => {\n      moveRow(item.index, index);\n    },\n  });\n  const [, drag] = useDrag({\n    type,\n    item: { index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  drop(drag(ref));\n\n  return (\n    <tr\n      ref={ref}\n      className={`${className}${isOver ? dropClassName : ''}`}\n      style={{ cursor: 'move', ...style }}\n      {...restProps}\n    />\n  );\n};\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Age',\n    dataIndex: 'age',\n    key: 'age',\n  },\n  {\n    title: 'Address',\n    dataIndex: 'address',\n    key: 'address',\n  },\n];\n\nconst DragSortingTable=() => {\n  const [data, setData] = useState([\n    {\n      key: '1',\n      name: 'John Brown',\n      age: 32,\n      address: 'New York No. 1 Lake Park',\n    },\n    {\n      key: '2',\n      name: 'Jim Green',\n      age: 42,\n      address: 'London No. 1 Lake Park',\n    },\n    {\n      key: '3',\n      name: 'Joe Black',\n      age: 32,\n      address: 'Sidney No. 1 Lake Park',\n    },\n  ]);\n\n  const components = {\n    body: {\n      row: DragableBodyRow,\n    },\n  };\n\n  const moveRow = useCallback(\n    (dragIndex, hoverIndex) => {\n      const dragRow = data[dragIndex];\n      setData(\n        update(data, {\n          $splice: [\n            [dragIndex, 1],\n            [hoverIndex, 0, dragRow],\n          ],\n        }),\n      );\n    },\n    [data],\n  );\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Table\n        columns={columns}\n        dataSource={data}\n        components={components}\n        onRow={(record, index) => ({\n          index,\n          moveRow,\n        })}\n      />\n    </DndProvider>\n  );\n};\n\nexport default DragSortingTable;\n// ReactDOM.render(<DragSortingTable />, mountNode);\n// #components-table-demo-drag-sorting tr.drop-over-downward td {\n//   border-bottom: 2px dashed #1890ff;\n// }\n\n// #components-table-demo-drag-sorting tr.drop-over-upward td {\n//   border-top: 2px dashed #1890ff;\n// }"]},"metadata":{},"sourceType":"module"}